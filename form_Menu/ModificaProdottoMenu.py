# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ModificaProdottoMenù.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QMessageBox
import mysql.connector
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.uic import loadUi
from db_connection import get_connection


class Ui_Form(object):
    id=None

    def setupUi(self, Form,idModifica):
        self.FormMPM = Form
        self.id=idModifica
        Form.setObjectName("Form")
        Form.resize(669, 837)
        font = QtGui.QFont()
        font.setPointSize(8)
        Form.setFont(font)
        Form.setStyleSheet("background-color: rgb(159, 197, 248);")

        self.lbl_titolo = QtWidgets.QLabel(Form)
        self.lbl_titolo.setGeometry(QtCore.QRect(20, 10, 391, 41))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(16)
        self.lbl_titolo.setFont(font)
        self.lbl_titolo.setObjectName("lbl_titolo")

        self.lbl_nome = QtWidgets.QLabel(Form)
        self.lbl_nome.setGeometry(QtCore.QRect(20, 70, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_nome.setFont(font)
        self.lbl_nome.setObjectName("lbl_nome")

        self.lbl_prezzo = QtWidgets.QLabel(Form)
        self.lbl_prezzo.setGeometry(QtCore.QRect(400, 70, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_prezzo.setFont(font)
        self.lbl_prezzo.setObjectName("lbl_prezzo")

        self.lbl_altre_info = QtWidgets.QLabel(Form)
        self.lbl_altre_info.setGeometry(QtCore.QRect(20, 180, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_altre_info.setFont(font)
        self.lbl_altre_info.setObjectName("lbl_altre_info")

        self.lbl_categoria = QtWidgets.QLabel(Form)
        self.lbl_categoria.setGeometry(QtCore.QRect(400, 180, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_categoria.setFont(font)
        self.lbl_categoria.setObjectName("lbl_categoria")

        self.lineEdit_nome = QtWidgets.QLineEdit(Form)
        self.lineEdit_nome.setGeometry(QtCore.QRect(10, 110, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.lineEdit_nome.setFont(font)
        self.lineEdit_nome.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.lineEdit_nome.setObjectName("lineEdit_nome")

        self.lineEdit_info = QtWidgets.QLineEdit(Form)
        self.lineEdit_info.setGeometry(QtCore.QRect(10, 220, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.lineEdit_info.setFont(font)
        self.lineEdit_info.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.lineEdit_info.setObjectName("lineEdit_info")


        self.line_sopra = QtWidgets.QFrame(Form)
        self.line_sopra.setGeometry(QtCore.QRect(0, 330, 691, 21))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.line_sopra.setFont(font)
        self.line_sopra.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_sopra.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_sopra.setObjectName("line_sopra")

        self.line_sopra2 = QtWidgets.QFrame(Form)
        self.line_sopra2.setGeometry(QtCore.QRect(0, 350, 681, 16))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.line_sopra2.setFont(font)
        self.line_sopra2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_sopra2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_sopra2.setObjectName("line_sopra2")

        self.lbl_ingrediente = QtWidgets.QLabel(Form)
        self.lbl_ingrediente.setGeometry(QtCore.QRect(30, 380, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_ingrediente.setFont(font)
        self.lbl_ingrediente.setObjectName("lbl_ingrediente")

        self.comboBox_categoria = QtWidgets.QComboBox(Form)
        self.comboBox_categoria.setGeometry(QtCore.QRect(390, 220, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.comboBox_categoria.setFont(font)
        self.comboBox_categoria.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.comboBox_categoria.setObjectName("comboBox_categoria")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(Form)
        self.doubleSpinBox.setGeometry(QtCore.QRect(500, 390, 111, 51))
        self.doubleSpinBox.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.doubleSpinBox.setObjectName("doubleSpinBox")

        self.doubleSpinBox.setDecimals(2)
        self.doubleSpinBox.setMinimum(0.1)
        self.doubleSpinBox.setMaximum(100.0)
        self.doubleSpinBox.setSingleStep(0.5)

        # Add sample categories to the combo box
        self.comboBox_categoria.addItems(
            ["Bevande", "Antipasti", "Primi", "Secondi", "Contorni", "Sushi", "Pizza", "Dolci", "Caffetteria"])

        self.lbl_quantit = QtWidgets.QLabel(Form)
        self.lbl_quantit.setGeometry(QtCore.QRect(390, 410, 100, 21))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.lbl_quantit.setFont(font)
        self.lbl_quantit.setObjectName("lbl_quantit")

        self.bt_elimina_ingrediente = QtWidgets.QPushButton(Form)
        self.bt_elimina_ingrediente.setGeometry(QtCore.QRect(460, 550, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        self.bt_elimina_ingrediente.setFont(font)
        self.bt_elimina_ingrediente.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.bt_elimina_ingrediente.setObjectName("bt_elimina_ingrediente")

        self.bt_aggiungi_ingrediente = QtWidgets.QPushButton(Form)
        self.bt_aggiungi_ingrediente.setGeometry(QtCore.QRect(460, 470, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.bt_aggiungi_ingrediente.setFont(font)
        self.bt_aggiungi_ingrediente.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.bt_aggiungi_ingrediente.setObjectName("bt_aggiungi_ingrediente")

        self.tw_Ingredienti = QtWidgets.QTableWidget(Form)
        self.tw_Ingredienti.setGeometry(QtCore.QRect(20, 650, 631, 171))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.tw_Ingredienti.setFont(font)
        self.tw_Ingredienti.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.tw_Ingredienti.setObjectName("tw_Ingredienti")
        self.tw_Ingredienti.setColumnCount(5)
        self.tw_Ingredienti.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tw_Ingredienti.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_Ingredienti.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_Ingredienti.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_Ingredienti.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_Ingredienti.setHorizontalHeaderItem(4, item)

        self.dsb_prezzo = QtWidgets.QDoubleSpinBox(Form)  # Modifica qui
        self.dsb_prezzo.setGeometry(QtCore.QRect(390, 110, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.dsb_prezzo.setFont(font)
        self.dsb_prezzo.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.dsb_prezzo.setObjectName("dsb_prezzo")
        self.dsb_prezzo.setDecimals(2)
        self.dsb_prezzo.setMaximum(9999.99)
        self.dsb_prezzo.setMinimum(0.00)

        self.bt_terminamodifica = QtWidgets.QPushButton(Form)
        self.bt_terminamodifica.setGeometry(QtCore.QRect(240, 270, 191, 51))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        self.bt_terminamodifica.setFont(font)
        self.bt_terminamodifica.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.bt_terminamodifica.setObjectName("bt_terminamodifica")

        self.listWidget_nome_elemento = QtWidgets.QListWidget(Form)
        self.listWidget_nome_elemento.setGeometry(QtCore.QRect(20, 370, 301, 192))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.listWidget_nome_elemento.setFont(font)
        self.listWidget_nome_elemento.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.listWidget_nome_elemento.setObjectName("listWidget_nome_elemento")

        self.retranslateUi(Form)
        self.carica_dati()
        self.popola_lista_elemento()
        self.bt_aggiungi_ingrediente.clicked.connect(self.aggiungi_ingrediente)
        self.bt_elimina_ingrediente.clicked.connect(self.elimina_ingrediente)
        self.bt_terminamodifica.clicked.connect(self.modifica_prodotto)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Modifica Prodotto Menu"))
        self.lbl_titolo.setText(_translate("Form", "Modifica Prodotto Menu"))
        self.lbl_nome.setText(_translate("Form", "Nome prodotto:"))
        self.lbl_prezzo.setText(_translate("Form", "Prezzo prodotto:"))
        self.lbl_altre_info.setText(_translate("Form", "Altre informazioni:"))
        self.lbl_categoria.setText(_translate("Form", "Categoria prodotto:"))
        self.lbl_ingrediente.setText(_translate("Form", "Ingrediente:"))
        self.lbl_quantit.setText(_translate("Form", "Quantità:"))
        self.bt_elimina_ingrediente.setText(_translate("Form", "Elimina Ingrediente"))
        self.bt_aggiungi_ingrediente.setText(_translate("Form", "Aggiungi Ingrediente"))
        item = self.tw_Ingredienti.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Ingrediente"))
        item = self.tw_Ingredienti.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Quantità"))
        item = self.tw_Ingredienti.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Intolleranze"))
        item = self.tw_Ingredienti.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Vegano"))
        item = self.tw_Ingredienti.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Piccante"))
        self.bt_terminamodifica.setText(_translate("Form", "Termina Modifica"))
        self.dsb_prezzo.raise_()


    def popola_lista_elemento(self):
        conn = get_connection()

        # Crea il cursore per eseguire query
        cursor = conn.cursor()

        try:
            # Query per selezionare le colonne 'id' e 'nome' dalla tabella 'nomeelemento'
            query = "SELECT id, nome FROM nomeelemento"
            cursor.execute(query)

            # Ottieni tutti i risultati dalla query
            result = cursor.fetchall()

            # Popola la QListWidget con i risultati della query
            for row in result:
                id_elemento = row[0]  # Assume che 'id' sia la prima colonna nella query
                nome_elemento = row[1]  # Assume che 'nome' sia la seconda colonna nella query
                elemento = f"{id_elemento} {nome_elemento}"
                self.listWidget_nome_elemento.addItem(elemento)

        except mysql.connector.Error as err:
            print(f"Errore durante l'esecuzione della query: {err}")

        finally:
            # Chiudi il cursore e la connessione
            cursor.close()
            conn.close()

    def carica_dati(self):
        conn = get_connection()

        cursor = conn.cursor()

        try:
            query = "SELECT nome, categoria, descrizione, prezzo FROM prodottomenu WHERE id = %s AND eliminato = 0"
            cursor.execute(query, (self.id,))
            result = cursor.fetchone()

            if result:
                self.lineEdit_nome.setText(result[0])
                self.comboBox_categoria.setCurrentText(result[1])
                self.lineEdit_info.setText(result[2])
                self.dsb_prezzo.setValue(float(result[3]))
            else:
                QMessageBox.warning(None, "Errore", "Prodotto non trovato o eliminato.")

        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Errore di connessione", f"Errore durante l'esecuzione della query: {err}")

        finally:
            cursor.close()
            conn.close()
            self.carica_ingredienti()
            self.FormMPM.close()

    def carica_ingredienti(self):
        conn = get_connection()

        cursor = conn.cursor()

        try:
            query = """
                SELECT ne.id, ne.nome, ip.Quantita, ne.intolleranze, ne.vegano, ne.piccante
                FROM ingredienteprodotto ip
                JOIN nomeelemento ne ON ip.IDNomeElemento = ne.id
                WHERE ip.IDProdotto = %s
            """
            cursor.execute(query, (self.id,))
            result = cursor.fetchall()

            self.tw_Ingredienti.setRowCount(0)
            for row in result:
                rowPosition = self.tw_Ingredienti.rowCount()
                self.tw_Ingredienti.insertRow(rowPosition)
                # Concatenate the ID and name
                id_nome = f"{row[0]} {row[1]}"
                self.tw_Ingredienti.setItem(rowPosition, 0, QTableWidgetItem(id_nome))
                for column, item in enumerate(row[2:], start=1):
                    cell = QTableWidgetItem(str(item))
                    self.tw_Ingredienti.setItem(rowPosition, column, cell)

        except mysql.connector.Error as err:
            QMessageBox.critical(None, "Errore di connessione", f"Errore durante l'esecuzione della query: {err}")

        finally:
            cursor.close()
            conn.close()


    def aggiungi_ingrediente(self):   # metodo che mi permette di far compilare la tabella relativa agli ingredienti del prodotto
        self.conn = get_connection()
        # Ottieni l'elemento selezionato dalla listWidget
        selected_item = self.listWidget_nome_elemento.currentItem()

        # Ottieni il valore della spinBox
        quantity = self.doubleSpinBox.value()

        if selected_item and quantity > 0:
            # Nome dell'ingrediente selezionato
            ingrediente = selected_item.text()

            # Query al database per ottenere il valore delle colonne 'intolleranze' e 'colonna5'
            cursor = self.conn.cursor()
            try:
                query = "SELECT intolleranze, vegano, piccante FROM nomeelemento WHERE nome = %s"
                cursor.execute(query, (ingrediente,))
                result = cursor.fetchone()
                intolleranze = result[0] if result else ""
                vegano = result[1] if result else ""
                piccante = result[2] if result else ""


            except mysql.connector.Error as err:
                print(f"Errore durante l'esecuzione della query: {err}")
                intolleranze = ""
                piccante = ""
                vegano = ""

            finally:
                cursor.close()

            # Inserisci i dati nella tabella tw_Ingredienti
            row_position = self.tw_Ingredienti.rowCount()
            self.tw_Ingredienti.insertRow(row_position)
            self.tw_Ingredienti.setItem(row_position, 0, QTableWidgetItem(ingrediente))
            self.tw_Ingredienti.setItem(row_position, 1, QTableWidgetItem(str(quantity)))
            self.tw_Ingredienti.setItem(row_position, 2, QTableWidgetItem(intolleranze))
            self.tw_Ingredienti.setItem(row_position, 3, QTableWidgetItem(vegano))
            self.tw_Ingredienti.setItem(row_position, 4, QTableWidgetItem(piccante))
        else:
            QMessageBox.warning(None, "Errore", "Seleziona un ingrediente e inserisci una quantità valida.")

    def elimina_ingrediente(self):  # permette di eliminare gli ingredienti dalla tabella
        # Ottieni la riga selezionata
        selected_row = self.tw_Ingredienti.currentRow()

        if selected_row != -1:
            # Rimuovi la riga selezionata
            self.tw_Ingredienti.removeRow(selected_row)
        else:
            QMessageBox.warning(None, "Errore", "Seleziona una riga da eliminare.")

    def modifica_prodotto(self):
        # Recupera i dati del prodotto dai campi di input
        categoria = self.comboBox_categoria.currentText()
        descrizione = self.lineEdit_info.text()
        nome = self.lineEdit_nome.text()
        prezzo = self.dsb_prezzo.value()  # Recupera il valore come float dal QDoubleSpinBox
        prodotto_id=self.id
        try:
            connection = get_connection()

            if connection.is_connected():
                cursor = connection.cursor()

                # Aggiorna il prodotto nella tabella prodottomenu
                query = """UPDATE prodottomenu
                           SET categoria = %s, descrizione = %s, nome = %s, prezzo = %s
                           WHERE id = %s"""
                record = (categoria, descrizione, nome, prezzo, prodotto_id)
                cursor.execute(query, record)
                connection.commit()

                # Cancella gli ingredienti esistenti del prodotto dalla tabella ingredienteprodotto
                query = """DELETE FROM ingredienteprodotto WHERE IDProdotto = %s"""
                cursor.execute(query, (prodotto_id,))
                connection.commit()

                # Itera attraverso la tabella degli ingredienti e inserisci i nuovi ingredienti
                for row in range(self.tw_Ingredienti.rowCount()):
                    ingrediente_item = self.tw_Ingredienti.item(row, 0)
                    quantita_item = self.tw_Ingredienti.item(row, 1)

                    if ingrediente_item and quantita_item:
                        # Estrarre ID e quantità dell'ingrediente
                        ingrediente_id = int(
                            ingrediente_item.text().split()[0])  # Supponendo che il formato sia "ID Nome"
                        quantita = float(quantita_item.text())

                        # Inserisci i nuovi dati nella tabella ingredienteprodotto
                        query = """INSERT INTO ingredienteprodotto (IDNomeElemento, IDProdotto, Quantita)
                                   VALUES (%s, %s, %s)"""
                        record = (ingrediente_id, prodotto_id, quantita)
                        cursor.execute(query, record)

                connection.commit()
                QtWidgets.QMessageBox.information(None, 'Successo', 'Prodotto e ingredienti modificati con successo')

        except mysql.connector.Error as e:
            QtWidgets.QMessageBox.critical(None, 'Errore', f'Errore durante la connessione al database: {e}')

        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()
                self.unifica_ingredienti()

    def unifica_ingredienti(self):
        try:
            connection = get_connection()

            if connection.is_connected():
                cursor = connection.cursor()

                # Raggruppa per IDNomeElemento e IDProdotto, sommando le quantità
                query_somma = """
                    SELECT IDNomeElemento, IDProdotto, SUM(Quantita) AS QuantitaTotale
                    FROM ingredienteprodotto
                    GROUP BY IDNomeElemento, IDProdotto
                    HAVING COUNT(*) > 1
                """
                cursor.execute(query_somma)
                risultati = cursor.fetchall()  # Recupera le combinazioni duplicate con le quantità totali

                # Per ogni duplicato, aggiorna la quantità e rimuovi le righe in eccesso
                for riga in risultati:
                    id_nome_elemento, id_prodotto, quantita_totale = riga

                    # Aggiorna una riga con la somma totale
                    query_aggiorna = """
                        UPDATE ingredienteprodotto
                        SET Quantita = %s
                        WHERE IDNomeElemento = %s AND IDProdotto = %s
                        LIMIT 1
                    """
                    cursor.execute(query_aggiorna, (quantita_totale, id_nome_elemento, id_prodotto))

                    # Rimuovi le righe duplicate
                    query_elimina = """
                        DELETE FROM ingredienteprodotto
                        WHERE IDNomeElemento = %s AND IDProdotto = %s
                        AND ID NOT IN (
                            SELECT ID FROM (
                                SELECT ID FROM ingredienteprodotto
                                WHERE IDNomeElemento = %s AND IDProdotto = %s
                                LIMIT 1
                            ) AS tmp
                        )
                    """
                    cursor.execute(query_elimina, (id_nome_elemento, id_prodotto, id_nome_elemento, id_prodotto))

                connection.commit()

        except mysql.connector.Error as e:
            QtWidgets.QMessageBox.critical(None, 'Errore', f'Errore durante la connessione al database: {e}')

        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    formLogin = QtWidgets.QDialog()
    ui = Ui_Form()
    ui.setupUi(formLogin)
    formLogin.show()
    sys.exit(app.exec_())
