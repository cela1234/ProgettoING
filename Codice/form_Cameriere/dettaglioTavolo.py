# -*- coding: utf-8 -*-
import mysql
from PyQt5.QtCore import QTimer, QDateTime, Qt

import Metodi_Gestione_Tavoli
# Form implementation generated from reading ui file 'F:\Users\framo\Desktop\ProgettoING-master\form_ui\dettaglioTavolo.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#from classi import Tavolo, Ordinazione
import mysql
from datetime import datetime
from MySQLdb import Error
import mysql.connector
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QDialog, QPushButton, QToolButton, QLabel, QVBoxLayout
from .formAggiungi_Tavolo import Ui_FrameAggiungiTavolo
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from db_connection import get_connection


class Ui_DettaglioTavolo(object):

    IDtavolo=None
    sequenzaAttuale=0
    FormDettaglioTavolo=None
    FormPadre=None
    def setupUi(self, Dialog, ID, padre):
        self.FormPadre=padre
        self.FormDettaglioTavolo = Dialog
        # self.FormDettaglioTavolo.setWindowTitle("Gestisci Tavolo: " + str(self.daIDaNumeroTavolo(ID)))
        self.IDtavolo = ID
        Dialog.setObjectName("Dialog")
        Dialog.resize(1001, 630)
        self.line = QtWidgets.QFrame(Dialog)
        self.line.setGeometry(QtCore.QRect(0, 540, 1011, 16))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(Dialog)
        self.line_2.setGeometry(QtCore.QRect(90, 0, 20, 631))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.line_2.setFont(font)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.btCatBevande = QtWidgets.QPushButton(Dialog)
        self.btCatBevande.setGeometry(QtCore.QRect(0, 30, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatBevande.setFont(font)
        self.btCatBevande.setStyleSheet("background-color: rgb(149, 188, 242)")
        self.btCatBevande.setObjectName("btCatBevande")
        self.btCatAntipasti = QtWidgets.QPushButton(Dialog)
        self.btCatAntipasti.setGeometry(QtCore.QRect(0, 60, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatAntipasti.setFont(font)
        self.btCatAntipasti.setObjectName("btCatAntipasti")
        self.btCatPrimi = QtWidgets.QPushButton(Dialog)
        self.btCatPrimi.setGeometry(QtCore.QRect(0, 90, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatPrimi.setFont(font)
        self.btCatPrimi.setObjectName("btCatPrimi")
        self.btCatDolci = QtWidgets.QPushButton(Dialog)
        self.btCatDolci.setGeometry(QtCore.QRect(0, 240, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatDolci.setFont(font)
        self.btCatDolci.setObjectName("btCatDolci")
        self.btCatCaffetteria = QtWidgets.QPushButton(Dialog)
        self.btCatCaffetteria.setGeometry(QtCore.QRect(0, 270, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatCaffetteria.setFont(font)
        self.btCatCaffetteria.setObjectName("btCatCaffetteria")
        self.btCatPizza = QtWidgets.QPushButton(Dialog)
        self.btCatPizza.setGeometry(QtCore.QRect(0, 210, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatPizza.setFont(font)
        self.btCatPizza.setObjectName("btCatPizza")
        self.btCatContorni = QtWidgets.QPushButton(Dialog)
        self.btCatContorni.setGeometry(QtCore.QRect(0, 150, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatContorni.setFont(font)
        self.btCatContorni.setObjectName("btCatContorni")
        self.btCatSushi = QtWidgets.QPushButton(Dialog)
        self.btCatSushi.setGeometry(QtCore.QRect(0, 180, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatSushi.setFont(font)
        self.btCatSushi.setObjectName("btCatSushi")
        self.btCatSecondi = QtWidgets.QPushButton(Dialog)
        self.btCatSecondi.setGeometry(QtCore.QRect(0, 120, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btCatSecondi.setFont(font)
        self.btCatSecondi.setObjectName("btCatSecondi")
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(250, 10, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(255, 217, 102);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 7, 81, 16))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.nudSequenzaOrdine = QtWidgets.QSpinBox(self.frame)
        self.nudSequenzaOrdine.setGeometry(QtCore.QRect(90, 4, 42, 22))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        self.nudSequenzaOrdine.setFont(font)
        self.nudSequenzaOrdine.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.nudSequenzaOrdine.setObjectName("nudSequenzaOrdine")
        self.line_3 = QtWidgets.QFrame(Dialog)
        self.line_3.setGeometry(QtCore.QRect(550, 0, 20, 548))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.line_3.setFont(font)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.frame_2 = QtWidgets.QFrame(Dialog)
        self.frame_2.setGeometry(QtCore.QRect(100, -1, 461, 551))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.frame_2.setFont(font)
        self.frame_2.setStyleSheet("background-color: rgb(181, 245, 244);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.twOrdini = QtWidgets.QTableWidget(Dialog)
        self.twOrdini.setGeometry(QtCore.QRect(560, 50, 441, 271))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.twOrdini.sizePolicy().hasHeightForWidth())
        self.twOrdini.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.twOrdini.setFont(font)
        self.twOrdini.setObjectName("twOrdini")
        self.twOrdini.setColumnCount(4)
        self.twOrdini.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twOrdini.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twOrdini.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twOrdini.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twOrdini.setHorizontalHeaderItem(3, item)
        self.twOrdini.horizontalHeader().setDefaultSectionSize(87)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(590, 5, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.nudNumeroCoperti = QtWidgets.QSpinBox(Dialog)
        self.nudNumeroCoperti.setGeometry(QtCore.QRect(720, 10, 42, 22))
        self.nudNumeroCoperti.setMinimum(1)
        self.nudNumeroCoperti.setObjectName("nudNumeroCoperti")
        self.btConfermaNumeroCoperti = QtWidgets.QPushButton(Dialog)
        self.btConfermaNumeroCoperti.setGeometry(QtCore.QRect(780, 7, 93, 28))
        self.btConfermaNumeroCoperti.setStyleSheet("background-color: rgb(255, 217, 102);")
        self.btConfermaNumeroCoperti.setObjectName("btConfermaNumeroCoperti")
        self.btInviaSequenzaInCucina = QtWidgets.QPushButton(Dialog)
        self.btInviaSequenzaInCucina.setGeometry(QtCore.QRect(580, 340, 151, 61))
        self.btInviaSequenzaInCucina.setStyleSheet("background-color: rgb(255, 217, 102);")
        self.btInviaSequenzaInCucina.setObjectName("btInviaSequenzaInCucina")
        self.btEliminaProdottoSelezionato = QtWidgets.QPushButton(Dialog)
        self.btEliminaProdottoSelezionato.setGeometry(QtCore.QRect(830, 340, 151, 61))
        self.btEliminaProdottoSelezionato.setStyleSheet("background-color: rgb(204, 0, 0);\n"
                                                        "color: rgb(255, 255, 255);")
        self.btEliminaProdottoSelezionato.setObjectName("btEliminaProdottoSelezionato")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(580, 420, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.nudDivisioneConto = QtWidgets.QSpinBox(Dialog)
        self.nudDivisioneConto.setGeometry(QtCore.QRect(680, 425, 42, 22))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setBold(False)
        font.setWeight(50)
        self.nudDivisioneConto.setFont(font)
        self.nudDivisioneConto.setMinimum(1)
        self.nudDivisioneConto.setObjectName("nudDivisioneConto")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(740, 420, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lblTotaleAPersona = QtWidgets.QLabel(Dialog)
        self.lblTotaleAPersona.setGeometry(QtCore.QRect(870, 430, 55, 16))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.lblTotaleAPersona.setFont(font)
        self.lblTotaleAPersona.setObjectName("lblTotaleAPersona")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(580, 470, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.cbCameriere = QtWidgets.QComboBox(Dialog)
        self.cbCameriere.setGeometry(QtCore.QRect(670, 480, 151, 22))
        self.cbCameriere.setObjectName("cbCameriere")
        self.btCompletaServizio = QtWidgets.QPushButton(Dialog)
        self.btCompletaServizio.setGeometry(QtCore.QRect(830, 464, 141, 51))
        self.btCompletaServizio.setStyleSheet("background-color: rgb(106, 168, 79);\n"
                                              "color: rgb(255, 255, 255);")
        self.btCompletaServizio.setObjectName("btCompletaServizio")
        self.lblDataOra = QtWidgets.QLabel(Dialog)
        self.lblDataOra.setGeometry(QtCore.QRect(10, 560, 100, 50))
        self.lblDataOra.setObjectName("lblDataOra")
        self.frame_2.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.btCatBevande.raise_()
        self.btCatAntipasti.raise_()
        self.btCatPrimi.raise_()
        self.btCatDolci.raise_()
        self.btCatCaffetteria.raise_()
        self.btCatPizza.raise_()
        self.btCatContorni.raise_()
        self.btCatSushi.raise_()
        self.btCatSecondi.raise_()
        self.frame.raise_()
        self.line_3.raise_()
        self.twOrdini.raise_()
        self.label_2.raise_()
        self.nudNumeroCoperti.raise_()
        self.btConfermaNumeroCoperti.raise_()
        self.btInviaSequenzaInCucina.raise_()
        self.btEliminaProdottoSelezionato.raise_()
        self.label_3.raise_()
        self.nudDivisioneConto.raise_()
        self.label_4.raise_()
        self.lblTotaleAPersona.raise_()
        self.label_6.raise_()
        self.cbCameriere.raise_()
        self.btCompletaServizio.raise_()
        self.lblDataOra.raise_()
        # Creazione del pulsante "Elimina Tavolo"
        self.btEliminaTavolo = QtWidgets.QPushButton(Dialog)
        self.btEliminaTavolo.setGeometry(QtCore.QRect(870, 570, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.btEliminaTavolo.setFont(font)
        self.btEliminaTavolo.setStyleSheet("background-color: rgb(255, 0, 0); color: white;")
        self.btEliminaTavolo.setObjectName("btEliminaTavolo")
        self.btEliminaTavolo.setText("Elimina Tavolo")

        self.retranslateUi(Dialog)
        #################################
        self.btCatBevande.clicked.connect(lambda: self.selezionaCategoria(self.btCatBevande))
        self.btCatAntipasti.clicked.connect(lambda: self.selezionaCategoria(self.btCatAntipasti))
        self.btCatPrimi.clicked.connect(lambda: self.selezionaCategoria(self.btCatPrimi))
        self.btCatDolci.clicked.connect(lambda: self.selezionaCategoria(self.btCatDolci))
        self.btCatCaffetteria.clicked.connect(lambda: self.selezionaCategoria(self.btCatCaffetteria))
        self.btCatPizza.clicked.connect(lambda: self.selezionaCategoria(self.btCatPizza))
        self.btCatContorni.clicked.connect(lambda: self.selezionaCategoria(self.btCatContorni))
        self.btCatSushi.clicked.connect(lambda: self.selezionaCategoria(self.btCatSushi))
        self.btCatSecondi.clicked.connect(lambda: self.selezionaCategoria(self.btCatSecondi))
        self.btConfermaNumeroCoperti.clicked.connect(lambda: self.btProdottoSelezionato(0))
        self.btInviaSequenzaInCucina.clicked.connect(self.btInviaSequenzaInCucinaClicked)
        self.btEliminaProdottoSelezionato.clicked.connect(self.btEliminaProdottoSelezionatoClicked)
        self.btEliminaTavolo.clicked.connect(self.eliminaTavolo_click)
        self.btCompletaServizio.clicked.connect(self.btCompletaServizioClicked)
        self.aggiornaProdotti(self.btCatBevande.text().lower())
        self.visualizzaOrdini()
        self.nudDivisioneConto.valueChanged.connect(self.calcolaTotaleAPersona)
        self.calcolaTotaleAPersona()
        self.aggiornaSeqAttuale()
        self.aggiornaTestoBottoneSequenza()
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Gestisci Tavolo"))
        self.btCatBevande.setText(_translate("Dialog", "Bevande"))
        self.btCatAntipasti.setText(_translate("Dialog", "Antipasti"))
        self.btCatPrimi.setText(_translate("Dialog", "Primi"))
        self.btCatDolci.setText(_translate("Dialog", "Dolci"))
        self.btCatCaffetteria.setText(_translate("Dialog", "Caffetteria"))
        self.btCatPizza.setText(_translate("Dialog", "Pizza"))
        self.btCatContorni.setText(_translate("Dialog", "Contorni"))
        self.btCatSushi.setText(_translate("Dialog", "Sushi"))
        self.btCatSecondi.setText(_translate("Dialog", "Secondi"))
        self.label.setText(_translate("Dialog", "SEQUENZA:"))
        item = self.twOrdini.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "Nome"))
        item = self.twOrdini.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Q.tà"))
        item = self.twOrdini.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "Prezzo"))
        item = self.twOrdini.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "Totale"))
        self.label_2.setText(_translate("Dialog", "Numero Coperti:"))
        self.btConfermaNumeroCoperti.setText(_translate("Dialog", "CONFERMA"))
        self.btInviaSequenzaInCucina.setText(_translate("Dialog", "Invia Sequenza 1 \n"
                                                                  " in Cucina"))
        self.btEliminaProdottoSelezionato.setText(_translate("Dialog", "Elimina Prodotto \n"
                                                                       " Selezionato"))
        self.label_3.setText(_translate("Dialog", "Dividi Conto:"))
        self.label_4.setText(_translate("Dialog", "Totale a persona:"))
        self.lblTotaleAPersona.setText(_translate("Dialog", "-€"))
        self.label_6.setText(_translate("Dialog", "Cameriere"))
        self.btCompletaServizio.setText(_translate("Dialog", "Completa Servizio / \n libera tavolo"))
        self.lblDataOra.setText(_translate("Dialog", "---------"))

        # Imposta un QTimer per aggiornare la data e l'ora ogni secondo
        self.timer = QTimer()
        self.timer.timeout.connect(self.updateDateTime)
        self.timer.start(1000)  # Aggiorna ogni 1000 millisecondi (1 secondo)

        # Aggiorna la data e l'ora inizialmente
        self.updateDateTime()

        # aggiungo anche quello che deve fare all'avvio
        self.popolaComboboxCamerieri()

    def updateDateTime(self):
        # Ottieni la data e l'ora corrente
        currentDateTime = QDateTime.currentDateTime()

        # Formatta la data e l'ora in un formato leggibile
        dateTimeText = currentDateTime.toString('yyyy-MM-dd \n HH:mm:ss')

        # Aggiorna la QLabel con la data e l'ora corrente
        self.lblDataOra.setText(dateTimeText)

    def selezionaCategoria(self, btn_cliccato):
        # Lista di tutti i bottoni per la selezione della categoria
        bottoni_categoria = [self.btCatBevande, self.btCatAntipasti, self.btCatPrimi, self.btCatDolci,
                             self.btCatCaffetteria, self.btCatPizza, self.btCatContorni, self.btCatSushi,
                             self.btCatSecondi]

        # Imposta lo sfondo del bottone cliccato su azzurro
        btn_cliccato.setStyleSheet("background-color: rgb(149, 188, 242)")

        # Imposta lo sfondo di tutti gli altri bottoni sulla selezione della categoria su grigio
        for btn in bottoni_categoria:
            if btn != btn_cliccato:
                btn.setStyleSheet("background-color: rgb(225, 225, 225)")
        self.aggiornaProdotti(btn_cliccato.text().lower())

    def popolaComboboxCamerieri(self):
        try:
            # Connessione al database su localhost
            conn = get_connection()
            cursor = conn.cursor()

            # Esecuzione della query per ottenere i nomi e cognomi dei camerieri
            cursor.execute("SELECT ID, CognomeNome FROM dipendente WHERE ruolo = 'cameriere'")
            result = cursor.fetchall()

            # Popolamento della QComboBox
            for row in result:
                self.cbCameriere.addItem(str(row[0]) +"-" +row[1])

            # Chiusura della connessione al database
            conn.close()
        except Error as e:
            print("Errore durante l'accesso al database:", e)

    def aggiornaProdotti(self, categoria):
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            # Rimuovi eventuali bottoni già presenti
            for widget in self.FormDettaglioTavolo.findChildren(QToolButton):
                if widget.objectName().startswith("btProdotto"):
                    widget.deleteLater()

            # Query per ottenere i prodotti della categoria selezionata
            query = "SELECT id, nome FROM prodottomenu WHERE categoria = %s"
            cursor.execute(query, (categoria,))
            products = cursor.fetchall()

            # Creazione dei bottoni per i prodotti
            x, y = 110, 60
            for product in products:
                product_id, product_name = product
                # Creazione del QToolButton
                product_button = QToolButton(self.FormDettaglioTavolo)
                product_button.setGeometry(x, y, 80, 70)

                # Creazione del QLabel per il testo
                label = QLabel(product_name, self.FormDettaglioTavolo)
                label.setWordWrap(True)  # Abilita l'andata a capo
                label.setAlignment(Qt.AlignCenter)  # Centra il testo
                label.setFixedWidth(63)  # Fissa la larghezza per far partire il wrapping

                # Aggiungi il QLabel al QToolButton tramite un layout verticale
                layout = QVBoxLayout(product_button)
                layout.addWidget(label)
                product_button.setLayout(layout)

                x += 90  # Spazio tra i bottoni
                if x > 500:  # Se supera la larghezza della finestra, vai a capo
                    x = 110
                    y += 80

                product_button.setObjectName("btProdotto_" + str(product_id))  # Aggiungi un nome univoco al pulsante
                product_button.clicked.connect(lambda _, id=product_id: self.btProdottoSelezionato(id))
                product_button.show()

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database
            if 'db_connection' in locals():
                db_connection.close()

    def btProdottoSelezionato(self, product_id):
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            # Controllo se esiste un'ordinazione non completata per il tavolo corrente
            query = "SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()

            if ordine:
                # Se l'id del prodotto è 0
                if product_id == 0:
                    # Controllo se ci sono già prodotti con id=0
                    query_check_zero_id = "SELECT ID FROM ElementoOrdine WHERE IDOrdinazione = %s AND IDprodotto = 0"
                    cursor.execute(query_check_zero_id, (ordine[0],))
                    zero_id_items = cursor.fetchall()

                    # Se ci sono già prodotti con id=0, li elimino
                    if zero_id_items:
                        query_delete_zero_id_items = "DELETE FROM ElementoOrdine WHERE IDOrdinazione = %s AND IDprodotto = 0"
                        cursor.execute(query_delete_zero_id_items, (ordine[0],))
                        db_connection.commit()

                    # Aggiungo il nuovo prodotto con id=0 all'ordine
                    quantita = self.nudNumeroCoperti.value()
                    for _ in range(quantita):
                        query_insert_zero_id_item = "INSERT INTO ElementoOrdine (completato, IDOrdinazione, IDprodotto, sequenza) VALUES (true, %s, 0, 0)"
                        cursor.execute(query_insert_zero_id_item, (ordine[0],))
                        db_connection.commit()
                    print("Prodotti con ID=0 aggiunti all'ordine del tavolo:", self.IDtavolo)



                else:
                    # Controlla se il prodotto è una bevanda
                    query_check_category = "SELECT categoria FROM prodottomenu WHERE id = %s"
                    cursor.execute(query_check_category, (product_id,))
                    categoria_prodotto = cursor.fetchone()
                    # Imposta la sequenza in base alla categoria
                    if categoria_prodotto and categoria_prodotto[0] == 'Bevande':
                        sequenza = 0
                        completato=1
                    else:
                        sequenza = self.nudSequenzaOrdine.value()
                        completato=0
                    # Aggiungo il prodotto all'ordine con l'id specificato
                    query_insert_order_item = "INSERT INTO ElementoOrdine (completato, IDOrdinazione, IDprodotto, sequenza) VALUES (%s, %s, %s, %s)"
                    cursor.execute(query_insert_order_item, (completato,ordine[0], product_id, sequenza))
                    db_connection.commit()
                    print("Prodotto aggiunto all'ordine del tavolo:", self.IDtavolo)

            else:
                # Se non esiste un'ordinazione non completata, creo una nuova ordinazione per il tavolo
                query_new_order = "INSERT INTO Ordinazione (IDtavolo, completato, sequenzaCorrente) VALUES (%s, false, 0)"
                cursor.execute(query_new_order, (self.IDtavolo,))
                db_connection.commit()
                print("Nuova ordinazione creata per il tavolo:", self.IDtavolo)

                # Ottengo l'ID dell'ordinazione appena creata
                new_order_id = cursor.lastrowid

                # Se l'id del prodotto è 0
                if product_id == 0:
                    # Aggiungo il prodotto con id=0 all'ordine
                    quantita = self.nudNumeroCoperti.value()
                    for _ in range(quantita):
                        query_insert_zero_id_item = "INSERT INTO ElementoOrdine (completato, IDOrdinazione, IDprodotto, sequenza) VALUES (true, %s, 0,0)"
                        cursor.execute(query_insert_zero_id_item, (new_order_id,))
                        db_connection.commit()
                    print("Prodotti con ID=0 aggiunti all'ordine del tavolo:", self.IDtavolo)

                else:
                    # Controlla se il prodotto è una bevanda
                    query_check_category = "SELECT categoria FROM prodottomenu WHERE id = %s"
                    cursor.execute(query_check_category, (product_id,))
                    categoria_prodotto = cursor.fetchone()
                    # Imposta la sequenza in base alla categoria
                    if categoria_prodotto and categoria_prodotto[0] == 'Bevande':
                        sequenza = 0
                        completato=1
                    else:
                        sequenza = self.nudSequenzaOrdine.value()
                        completato=0
                    # Aggiungo il prodotto all'ordine con l'id specificato
                    query_insert_order_item = "INSERT INTO ElementoOrdine (completato, IDOrdinazione, IDprodotto, sequenza) VALUES (%s, %s, %s, %s)"
                    cursor.execute(query_insert_order_item, (completato, new_order_id, product_id, sequenza))
                    db_connection.commit()
                    print("Prodotto aggiunto all'ordine del tavolo:", self.IDtavolo)

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database
            if 'db_connection' in locals():
                db_connection.close()
                self.calcolaTotaleAPersona()
                self.aggiornaTestoBottoneSequenza()
                self.visualizzaOrdini()
                self.FormPadre.updateLabel_e_Tavoli()

    def visualizzaOrdini(self):
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            # Controllo se esiste un'ordinazione non completata per il tavolo corrente
            query = "SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()

            if ordine:
                # Ottengo l'ID dell'ordinazione non completata
                id_ordinazione = ordine[0]

                # Ottengo gli elementi dell'ordine per l'ordinazione corrente, ordinati per sequenza
                query_ordine = """
                        SELECT pm.nome, COUNT(eo.IDprodotto), CONCAT(FORMAT(pm.prezzo, 2), '€'), CONCAT(FORMAT(COUNT(eo.IDprodotto) * pm.prezzo, 2), '€') AS totale, eo.sequenza
                        FROM ElementoOrdine AS eo
                        INNER JOIN ProdottoMenu AS pm ON eo.IDprodotto = pm.id
                        WHERE eo.IDOrdinazione = %s
                        GROUP BY eo.IDprodotto, eo.sequenza
                        ORDER BY eo.sequenza
                    """
                cursor.execute(query_ordine, (id_ordinazione,))
                ordini = cursor.fetchall()

                # Pulizia della tabella
                self.twOrdini.setRowCount(0)

                # Dizionario per memorizzare gli elementi ordinati per sequenza
                sequenze_ordine = {}

                # Raggruppo gli elementi ordinati per sequenza nel dizionario
                for ordine in ordini:
                    sequenza = ordine[4]  # Sequenza è la quinta colonna nella query
                    if sequenza not in sequenze_ordine:
                        sequenze_ordine[sequenza] = []
                    sequenze_ordine[sequenza].append(ordine)

                # Aggiunta degli ordini alla tabella, raggruppati per sequenza
                for sequenza, elementi in sequenze_ordine.items():
                    row_position = self.twOrdini.rowCount()
                    self.twOrdini.insertRow(row_position)

                    sequenza_item = QtWidgets.QTableWidgetItem(f"SEQUENZA {sequenza}")
                    sequenza_item.setForeground(QtGui.QColor("blue"))
                    sequenza_item.setFont(QtGui.QFont("Arial", 10, QtGui.QFont.Bold))
                    self.twOrdini.setItem(row_position, 0, sequenza_item)
                    self.twOrdini.setSpan(row_position, 0, 1, self.twOrdini.columnCount())

                    for elemento in elementi:
                        row_position = self.twOrdini.rowCount()
                        self.twOrdini.insertRow(row_position)
                        for column, value in enumerate(elemento[:-1]):  # Escludo la sequenza dall'iterazione
                            item = QtWidgets.QTableWidgetItem(str(value))
                            if column in [2, 3]:  # Indici delle colonne prezzo e totale
                                item.setTextAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
                            self.twOrdini.setItem(row_position, column, item)

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database
            if 'db_connection' in locals():
                db_connection.close()

    def calcolaTotaleAPersona(self):
        # Ottieni il valore dallo spinbox
        divisione = self.nudDivisioneConto.value()

        # Inizializza la variabile per il totale
        totale = 0

        # Somma il valore di tutte le celle nella quarta colonna del table widget
        for riga in range(self.twOrdini.rowCount()):
            item = self.twOrdini.item(riga, 3)
            if item is not None and item.text():
                try:
                    totale += float(item.text().replace('€', '').replace(',', '.'))
                except ValueError:
                    pass

        # Calcola il totale diviso per il valore dello spinbox
        totale_per_persona = totale / divisione

        # Aggiorna il testo della label con il totale per persona
        self.lblTotaleAPersona.setText("{:.2f}€".format(totale_per_persona))

    def btEliminaProdottoSelezionatoClicked(self):
        # Ottiene l'elemento selezionato
        selected_items = self.twOrdini.selectedItems()
        if not selected_items:
            QMessageBox.warning(self.FormDettaglioTavolo, "Errore", "Seleziona un elemento da eliminare.")
            return

        # Assume che l'ID sia nella prima colonna
        selected_row = selected_items[0].row()
        nome_item = self.twOrdini.item(selected_row, 0)
        if not nome_item:
            QMessageBox.warning(self.FormDettaglioTavolo, "Errore",
                                "Impossibile trovare l'ID dell'elemento selezionato.")
            return

        nomeProdotto = nome_item.text()
        if "SEQUENZA" in nomeProdotto:
            QMessageBox.warning(self.FormDettaglioTavolo, "Errore", "Non puoi eliminare una riga di sequenza.")
            return

        try:
            # Connessione al database
            conn = get_connection()
            cursor = conn.cursor()

            # Controllo se esiste un'ordinazione non completata per il tavolo corrente
            query = "SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()
            cursor.fetchall()  # Consuma eventuali risultati non letti

            if ordine:
                id_ordine = ordine[0]
                # Trova l'ID del prodotto dal nome del prodotto
                query_id_prodotto = "SELECT ID FROM ProdottoMenu WHERE Nome = %s"
                cursor.execute(query_id_prodotto, (nomeProdotto,))
                prodotto = cursor.fetchone()
                cursor.fetchall()  # Consuma eventuali risultati non letti

                if prodotto is None:
                    QMessageBox.warning(None, "Errore", "Prodotto non trovato.")
                    return

                IDprodotto = prodotto[0]

                # Trova l'elemento ordine con id_ordine e IDProdotto corrispondenti
                query_elemento_ordine = """
                            SELECT ID FROM ElementoOrdine 
                            WHERE IDOrdinazione = %s AND IDProdotto = %s
                        """
                cursor.execute(query_elemento_ordine, (id_ordine, IDprodotto))
                elemento_ordine = cursor.fetchone()
                cursor.fetchall()  # Consuma eventuali risultati non letti

                if elemento_ordine is None:
                    QMessageBox.warning(None, "Errore", "Elemento ordine non trovato.")
                    return

                ID_elemento_ordine = elemento_ordine[0]

                # Elimina l'elemento ordine trovato
                query_elimina_elemento = "DELETE FROM ElementoOrdine WHERE ID = %s"
                cursor.execute(query_elimina_elemento, (ID_elemento_ordine,))
                conn.commit()

                self.visualizzaOrdini()
                self.calcolaTotaleAPersona()
                QMessageBox.information(self.FormDettaglioTavolo, "Successo", "Elemento eliminato con successo.")

        except mysql.connector.Error as e:
            QMessageBox.critical(self.FormDettaglioTavolo, "Errore", f"Errore durante l'accesso al database: {e}")

        finally:
            # Chiusura della connessione al database
            if conn.is_connected():
                cursor.close()
                conn.close()
                self.FormPadre.updateLabel_e_Tavoli()

    def btInviaSequenzaInCucinaClicked(self):
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            # Controllo se esiste un'ordinazione non completata per il tavolo corrente
            query = "SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()

            if ordine:
                query = "UPDATE Ordinazione SET sequenzaCorrente = sequenzaCorrente + 1 WHERE id = %s"

                # Esecuzione della query
                cursor.execute(query, (ordine[0],))

                # Conferma delle modifiche
                db_connection.commit()

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database
            if 'db_connection' in locals():
                db_connection.close()
                self.aggiornaTestoBottoneSequenza()

    def aggiornaTestoBottoneSequenza(self):
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            # Controllo se esiste un'ordinazione non completata per il tavolo corrente
            query = "SELECT sequenzaCorrente FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()

            if ordine:
                if ordine[0] is not None:
                    sequenza_corrente = ordine[0]
                    # Modifica del testo del bottone con la sequenza corrente
                    self.btInviaSequenzaInCucina.setText(f"Invia Sequenza { sequenza_corrente+1}\n in Cucina")
                    self.nudSequenzaOrdine.setValue(sequenza_corrente+1)
            else:
                self.btInviaSequenzaInCucina.setText("-")

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database...................................0poèio99999999999999999999889777788888888uy
            if 'db_connection' in locals():
                db_connection.close()

    def aggiornaSeqAttuale(self):
#aggiorna la var sequenzaAttuale al valore della seq. dell'elemento con seq. minore e non completato
        try:
            # Connessione al database
            conn = get_connection()
            cursor = conn.cursor()

            # Trova l'ordinazione non completata per il tavolo specificato
            cursor.execute("SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0", (self.IDtavolo,))
            ordinazione = cursor.fetchone()

            if not ordinazione:
                # Se non esiste un'ordinazione non completata, restituisci 0
                return 0

            # Trova l'elemento ordine con la sequenza più bassa per l'ordinazione trovata
            cursor.execute("SELECT MIN(Sequenza) FROM ElementoOrdine WHERE IDOrdinazione = %s AND completato = 0",
                           (ordinazione[0],))
            self.sequenzaAttuale = cursor.fetchone()[0]


        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
            return 0

        finally:
            # Chiusura della connessione al database
            if conn.is_connected():
                cursor.close()
                conn.close()



    def btCompletaServizioClicked(self):

        #devo creare la fattura, rendere l'ordine completato e liberare il tavolo
        #CREO FATTURA mi serve id_ordinazione, id_cameriere, ricavo e data_e_ora
        id_ordinazione=None
        try:
            # Connessione al database
            db_connection = get_connection()
            cursor = db_connection.cursor()

            query = "SELECT ID FROM Ordinazione WHERE IDtavolo = %s AND completato = 0"
            cursor.execute(query, (self.IDtavolo,))
            ordine = cursor.fetchone()

            if ordine:
                id_ordinazione = ordine[0]
                #ora trovo id_cameriere
                id_cameriere=self.cbCameriere.currentText().split('-')[0]
                #ora il ricavo
                ricavo = 0

                # Somma il valore di tutte le celle nella quarta colonna del table widget
                for riga in range(self.twOrdini.rowCount()):
                    item = self.twOrdini.item(riga, 3)
                    if item is not None and item.text():
                        try:
                            ricavo += float(item.text().replace('€', '').replace(',', '.'))
                        except ValueError:
                            pass
                date_e_ora=datetime.now()
                if ricavo !=0:
                    # Query SQL per inserire una nuova tupla nella tabella fattura
                    query = """
                            INSERT INTO fattura (Dataeorafattura, idcameriere, idordinazione, ricavo)
                            VALUES (%s, %s, %s, %s);
                            """

                    # Valori da inserire
                    valori = (date_e_ora, id_cameriere, id_ordinazione, ricavo)

                    # Esecuzione della query con i valori
                    cursor.execute(query, valori)

                    # Salvare le modifiche
                    db_connection.commit()

                #AGGIUNTA LA FATTURA RENDO L'ORDINE COMPLETATO
                queryOrdine = """
                              UPDATE Ordinazione
                              SET completato = true
                              WHERE ID = %s
                              """

                valoriOrdine = (id_ordinazione,)
                cursor.execute(queryOrdine, valoriOrdine)
                db_connection.commit()

                #AGGIORNO ELEMENTI MAGAZZINO
                # Trovo tutti gli elementi dell'ordine
                queryElementiOrdine = """
                                                  SELECT idProdotto
                                                  FROM elementoordine
                                                  WHERE idOrdinazione = %s
                                                  """
                cursor.execute(queryElementiOrdine, (id_ordinazione,))
                elementi_ordine = cursor.fetchall()

                for elemento in elementi_ordine:
                    id_prodotto = elemento[0]
                    # Trovo tutti gli ingredienti che compongono il prodotto
                    queryIngredienti = """
                                                   SELECT IDNomeElemento, Quantita
                                                   FROM ingredienteprodotto
                                                   WHERE IDProdotto = %s
                                                   """
                    cursor.execute(queryIngredienti, (id_prodotto,))
                    ingredienti = cursor.fetchall()

                    for ingrediente in ingredienti:
                        id_nome_elemento, quantita_richiesta = ingrediente

                        # Finché rimane quantità da sottrarre, prendo dalla scadenza più vicina
                        while quantita_richiesta > 0:
                            # Prendo la riga con la scadenza più vicina
                            queryQuantitaMagazzino = """
                                    SELECT id, Quantita, Scadenza
                                    FROM elementomagazzino
                                    WHERE idNomeElemento = %s
                                    ORDER BY Scadenza ASC
                                    LIMIT 1
                                """
                            cursor.execute(queryQuantitaMagazzino, (id_nome_elemento,))
                            riga_magazzino = cursor.fetchone()

                            if not riga_magazzino:
                                # Se non ci sono più righe disponibili, segnala errore
                                QtWidgets.QMessageBox.critical(None, "Errore di magazzino",
                                                               f"Quantità insufficiente per l'ingrediente con ID {id_nome_elemento}.")
                                db_connection.rollback()
                                return

                            id_riga, quantita_magazzino, scadenza = riga_magazzino

                            # Se la quantità della riga è sufficiente, sottraggo tutto
                            if quantita_magazzino >= quantita_richiesta:
                                queryAggiornaMagazzino = """
                                        UPDATE elementomagazzino
                                        SET Quantita = Quantita - %s
                                        WHERE id = %s
                                    """
                                cursor.execute(queryAggiornaMagazzino, (quantita_richiesta, id_riga))
                                quantita_richiesta = 0  # Tutta la quantità è stata sottratta
                            else:
                                # Sottraggo tutta la quantità disponibile e cancello la riga
                                queryCancellaRiga = """
                                                    DELETE FROM elementomagazzino
                                                    WHERE id = %s
                                                """
                                cursor.execute(queryCancellaRiga, (id_riga,))
                                quantita_richiesta -= quantita_magazzino  # Decremento la quantità restante

                        db_connection.commit()

                #INFINE LIBERIAMO IL TAVOLO
                queryTavolo="""
                              UPDATE Tavolo
                              SET stato = 'libero'
                              WHERE ID = %s
                              """
                valoriTav = (self.IDtavolo,)
                cursor.execute(queryTavolo, valoriTav)
                db_connection.commit()

        except mysql.connector.Error as error:
            print("Errore durante l'accesso al database:", error)
        finally:
            # Chiusura della connessione al database
            if 'db_connection' in locals():
                db_connection.close()
                self.FormPadre.updateLabel_e_Tavoli()
                self.FormDettaglioTavolo.close()

    def eliminaTavolo_click(self):
        reply = QMessageBox.question(None, 'Conferma eliminazione', 'Sei sicuro di voler eliminare il tavolo?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                conn = get_connection()
                if conn.is_connected():
                    cursor = conn.cursor()

                    # Controllare se ci sono ordinazioni non completate per il tavolo
                    cursor.execute(
                        f"SELECT COUNT(*) FROM Ordinazione WHERE idTavolo = {self.IDtavolo} AND completato = 0")
                    result = cursor.fetchone()
                    if result[0] > 0:
                        QMessageBox.warning(None, 'Errore',
                                            'Non puoi eliminare il tavolo perché ci sono ordinazioni non completate associate.')
                    else:
                        # Aggiornare tutte le ordinazioni associate al tavolo per impostare idTavolo a NULL
                        cursor.execute(f"UPDATE Ordinazione SET idTavolo = NULL WHERE idTavolo = {self.IDtavolo}")
                        conn.commit()
                        # Ora eliminare il tavolo
                        cursor.execute(f"DELETE FROM Tavolo WHERE ID = {self.IDtavolo}")
                        conn.commit()
                        QMessageBox.information(None, 'Successo',
                                                'Il tavolo è stato eliminato e le ordinazioni associate sono state aggiornate.')
                        self.FormDettaglioTavolo.close()
            except Error as e:
                QMessageBox.critical(None, 'Errore', f"Si è verificato un errore: {str(e)}")
            finally:
                if conn.is_connected():
                    cursor.close()
                    conn.close()