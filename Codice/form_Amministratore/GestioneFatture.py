# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Users\framo\Desktop\ProgettoING-master\form_ui\GestioneFatture.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from datetime import datetime

import mysql
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QMessageBox, QTableWidgetItem, QVBoxLayout, QLabel
from db_connection import get_connection
from form_Amministratore import DettaglioFattura
from form_Prenotazioni.aggiungiModificaPrenotazione import Ui_AggiungiModificaPrenotazione


class Ui_GestioneFatture(object):
    def setupUi(self, GestioneFatture):
        GestioneFatture.setObjectName("GestioneFatture")
        GestioneFatture.resize(984, 773)
        GestioneFatture.setStyleSheet("background-color: rgb(159, 197, 248);")
        self.linea_sopra = QtWidgets.QFrame(GestioneFatture)
        self.linea_sopra.setGeometry(QtCore.QRect(0, 30, 991, 31))
        self.linea_sopra.setFrameShape(QtWidgets.QFrame.HLine)
        self.linea_sopra.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.linea_sopra.setObjectName("linea_sopra")
        self.lbl_titolo = QtWidgets.QLabel(GestioneFatture)
        self.lbl_titolo.setGeometry(QtCore.QRect(10, 10, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(16)
        self.lbl_titolo.setFont(font)
        self.lbl_titolo.setObjectName("lbl_titolo")
        self.CWCalendario = QtWidgets.QCalendarWidget(GestioneFatture)
        self.CWCalendario.setGeometry(QtCore.QRect(20, 60, 431, 501))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.CWCalendario.setFont(font)
        self.CWCalendario.setStyleSheet("selection-background-color: rgb(255, 170, 127);\n"
"gridline-color: rgb(0, 0, 0);\n"
"\n"
" \n"
"background-color: rgb(240, 236, 95);\n"
"")
        self.CWCalendario.setObjectName("CWCalendario")
        self.bt_rimuovi_fattura = QtWidgets.QPushButton(GestioneFatture)
        self.bt_rimuovi_fattura.setGeometry(QtCore.QRect(80, 600, 351, 151))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(16)
        self.bt_rimuovi_fattura.setFont(font)
        self.bt_rimuovi_fattura.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.bt_rimuovi_fattura.setObjectName("bt_rimuovi_fattura")
        self.bt_mostra_info = QtWidgets.QPushButton(GestioneFatture)
        self.bt_mostra_info.setGeometry(QtCore.QRect(550, 600, 351, 151))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(16)
        self.bt_mostra_info.setFont(font)
        self.bt_mostra_info.setAcceptDrops(False)
        self.bt_mostra_info.setStyleSheet("background-color: rgb(245, 243, 201);")
        self.bt_mostra_info.setAutoRepeat(False)
        self.bt_mostra_info.setObjectName("bt_mostra_info")
        self.tabella_fatture = QtWidgets.QTableWidget(GestioneFatture)
        self.tabella_fatture.setGeometry(QtCore.QRect(480, 60, 471, 501))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.tabella_fatture.setFont(font)
        self.tabella_fatture.setStyleSheet("background-color: rgb(240, 236, 95);\n"
"")
        self.tabella_fatture.setObjectName("tabella_fatture")
        self.tabella_fatture.setColumnCount(5)
        self.tabella_fatture.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tabella_fatture.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabella_fatture.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabella_fatture.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabella_fatture.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabella_fatture.setHorizontalHeaderItem(4, item)
        self.tabella_fatture.setSortingEnabled(True)
        self.retranslateUi(GestioneFatture)
        QtCore.QMetaObject.connectSlotsByName(GestioneFatture)
        self.aggiornaFatture()
        self.CWCalendario.selectionChanged.connect(self.aggiornaFatture)
        self.bt_rimuovi_fattura.clicked.connect(self.eliminaFattura)
        self.bt_mostra_info.clicked.connect(self.mostraInformazioni)


    def retranslateUi(self, GestioneFatture):
        _translate = QtCore.QCoreApplication.translate
        GestioneFatture.setWindowTitle(_translate("GestioneFatture", "Gestione Fatture"))
        self.lbl_titolo.setText(_translate("GestioneFatture", "Gestione Fatture"))
        self.bt_rimuovi_fattura.setText(_translate("GestioneFatture", "Rimuovi Fattura"))
        self.bt_mostra_info.setText(_translate("GestioneFatture", "Mostra Informazioni"))
        item = self.tabella_fatture.horizontalHeaderItem(0)
        item.setText(_translate("GestioneFatture", "ID"))
        item = self.tabella_fatture.horizontalHeaderItem(1)
        item.setText(_translate("GestioneFatture", "Data e Ora"))
        item = self.tabella_fatture.horizontalHeaderItem(2)
        item.setText(_translate("GestioneFatture", "Fatturato"))
        item = self.tabella_fatture.horizontalHeaderItem(3)
        item.setText(_translate("GestioneFatture", "Cameriere"))
        item = self.tabella_fatture.horizontalHeaderItem(4)
        item.setText(_translate("GestioneFatture", "ID Ordine"))

    def aggiornaFatture(self):
        data_selezionata = self.CWCalendario.selectedDate().toString("yyyy-MM-dd")

        # Connessione al database
        db = None
        cursor = None

        try:
            db   = get_connection()
            cursor = db.cursor()
            # Query per prendere i dati dalla tabella Fattura
            query = """
                        SELECT ID, DataEOraFattura, Ricavo, IDCameriere, IDOrdinazione
                        FROM Fattura
                        WHERE DATE(DataEOraFattura) = %s
                    """
            cursor.execute(query, (data_selezionata,))
            risultati = cursor.fetchall()

            # Pulizia della tabella esistente
            self.tabella_fatture.setRowCount(0)

            for row_num, row_data in enumerate(risultati):
                self.tabella_fatture.insertRow(row_num)
                self.tabella_fatture.setItem(row_num, 0, QTableWidgetItem(str(row_data[0])))
                data_ora = row_data[1].strftime("%Y-%m-%d %H:%M:%S")
                self.tabella_fatture.setItem(row_num, 1, QTableWidgetItem(data_ora))
                self.tabella_fatture.setItem(row_num, 2, QTableWidgetItem(str(row_data[2])))
                self.tabella_fatture.setItem(row_num, 3, QTableWidgetItem(str(row_data[3])))
                self.tabella_fatture.setItem(row_num, 4, QTableWidgetItem(str(row_data[4])))

        except mysql.connector.Error as err:
                print(f"Errore: {err}")
        finally:
            # Chiudi la connessione al database
            if cursor:
                cursor.close()
            if db:
                db.close()

    def eliminaFattura(self):
        # Ottieni la riga selezionata
        selected_row = self.tabella_fatture.currentRow()
        if selected_row == -1:
            print("Seleziona una fattura da eliminare.")
            return

        # Ottieni l'ID della fattura dalla prima colonna della riga selezionata
        id_fattura = self.tabella_fatture.item(selected_row, 0).text()

        # Connessione al database
        db = None
        cursor = None

        try:
            db = get_connection()
            cursor = db.cursor()

            # Query per eliminare la fattura con l'ID selezionato
            query = "DELETE FROM Fattura WHERE ID = %s"
            cursor.execute(query, (id_fattura,))
            db.commit()

            # Rimuovi la riga dalla tabella
            self.tabella_fatture.removeRow(selected_row)

        except mysql.connector.Error as err:
            print(f"Errore: {err}")
        finally:
            self.aggiornaFatture()
            # Chiudi la connessione al database
            if cursor:
                cursor.close()
            if db:
                db.close()

    def mostraInformazioni(self):
        # Ottieni la riga selezionata
        selected_row = self.tabella_fatture.currentRow()

        if selected_row == -1:
            QMessageBox.warning(self, "Errore", "Seleziona una fattura per vedere i dettagli.")
            return

        try:
            # Ottieni l'ID dell'ordinazione dalla quinta colonna della riga selezionata
            id_ordinazione_item = self.tabella_fatture.item(selected_row, 4)

            if id_ordinazione_item is None or not id_ordinazione_item.text():
                QMessageBox.warning(self, "Errore", "L'ID dell'ordinazione non è disponibile.")
                return

            id_ordinazione = id_ordinazione_item.text()

            # Apri la finestra di dettaglio della fattura
            self.formDettaglioFattura = QtWidgets.QDialog()
            self.DettaglioFat = DettaglioFattura.Ui_Dialog()
            self.DettaglioFat.setupUi(id_ordinazione, self.formDettaglioFattura)
            self.formDettaglioFattura.show()

        except Exception as e:
            QMessageBox.critical(self, "Errore",
                                 f"Si è verificato un errore durante la visualizzazione delle informazioni: {str(e)}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GestioneFatture = QtWidgets.QDialog()
    ui = Ui_GestioneFatture()
    ui.setupUi(GestioneFatture)
    GestioneFatture.show()
    sys.exit(app.exec_())
