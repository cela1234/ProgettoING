# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'F:\Users\framo\Desktop\ProgettoING-master\form_ui\analisiDati.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql, mysql.connector
from db_connection import get_connection


class Ui_AnalisiDati(object):
    def setupUi(self, AnalisiDati):
        AnalisiDati.setObjectName("AnalisiDati")
        AnalisiDati.resize(802, 888)
        AnalisiDati.setStyleSheet("background-color: rgb(159, 197, 248);")
        self.label = QtWidgets.QLabel(AnalisiDati)
        self.label.setGeometry(QtCore.QRect(20, 10, 201, 51))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(AnalisiDati)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.twFullCostPiatti = QtWidgets.QTableWidget(AnalisiDati)
        self.twFullCostPiatti.setGeometry(QtCore.QRect(10, 140, 351, 261))
        self.twFullCostPiatti.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.twFullCostPiatti.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.twFullCostPiatti.setObjectName("twFullCostPiatti")
        self.twFullCostPiatti.setColumnCount(3)
        self.twFullCostPiatti.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twFullCostPiatti.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twFullCostPiatti.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twFullCostPiatti.setHorizontalHeaderItem(2, item)
        self.twEfficienzaPiatti = QtWidgets.QTableWidget(AnalisiDati)
        self.twEfficienzaPiatti.setGeometry(QtCore.QRect(430, 140, 351, 261))
        self.twEfficienzaPiatti.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.twEfficienzaPiatti.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.twEfficienzaPiatti.setObjectName("twEfficienzaPiatti")
        self.twEfficienzaPiatti.setColumnCount(3)
        self.twEfficienzaPiatti.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twEfficienzaPiatti.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEfficienzaPiatti.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEfficienzaPiatti.setHorizontalHeaderItem(2, item)
        self.label_3 = QtWidgets.QLabel(AnalisiDati)
        self.label_3.setGeometry(QtCore.QRect(440, 60, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(AnalisiDati)
        self.label_5.setGeometry(QtCore.QRect(20, 445, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.deInizioMediaFatturato = QtWidgets.QDateEdit(AnalisiDati)
        self.deInizioMediaFatturato.setGeometry(QtCore.QRect(60, 493, 110, 22))
        self.deInizioMediaFatturato.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.deInizioMediaFatturato.setDateTime(QtCore.QDateTime(QtCore.QDate(2024, 1, 1), QtCore.QTime(0, 0, 0)))
        self.deInizioMediaFatturato.setObjectName("deInizioMediaFatturato")
        self.label_6 = QtWidgets.QLabel(AnalisiDati)
        self.label_6.setGeometry(QtCore.QRect(20, 490, 21, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(AnalisiDati)
        self.label_7.setGeometry(QtCore.QRect(190, 490, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.deFineMediaFatturato = QtWidgets.QDateEdit(AnalisiDati)
        self.deFineMediaFatturato.setGeometry(QtCore.QRect(220, 493, 110, 22))
        self.deFineMediaFatturato.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.deFineMediaFatturato.setDateTime(QtCore.QDateTime(QtCore.QDate(2024, 1, 1), QtCore.QTime(23, 59, 59)))
        self.deFineMediaFatturato.setTime(QtCore.QTime(23, 59, 59))
        self.deFineMediaFatturato.setObjectName("deFineMediaFatturato")
        self.label_9 = QtWidgets.QLabel(AnalisiDati)
        self.label_9.setGeometry(QtCore.QRect(350, 490, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.lblValoreMediaFatturato = QtWidgets.QLabel(AnalisiDati)
        self.lblValoreMediaFatturato.setGeometry(QtCore.QRect(480, 490, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lblValoreMediaFatturato.setFont(font)
        self.lblValoreMediaFatturato.setText("")
        self.lblValoreMediaFatturato.setObjectName("lblValoreMediaFatturato")
        self.label_8 = QtWidgets.QLabel(AnalisiDati)
        self.label_8.setGeometry(QtCore.QRect(20, 550, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_10 = QtWidgets.QLabel(AnalisiDati)
        self.label_10.setGeometry(QtCore.QRect(20, 640, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(AnalisiDati)
        self.label_11.setGeometry(QtCore.QRect(20, 600, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.deFineGiorniFatturato = QtWidgets.QDateEdit(AnalisiDati)
        self.deFineGiorniFatturato.setGeometry(QtCore.QRect(120, 643, 110, 22))
        self.deFineGiorniFatturato.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.deFineGiorniFatturato.setDateTime(QtCore.QDateTime(QtCore.QDate(2024, 1, 1), QtCore.QTime(23, 59, 59)))
        self.deFineGiorniFatturato.setTime(QtCore.QTime(23, 59, 59))
        self.deFineGiorniFatturato.setObjectName("deFineGiorniFatturato")
        self.deInizioGiorniFatturato = QtWidgets.QDateEdit(AnalisiDati)
        self.deInizioGiorniFatturato.setGeometry(QtCore.QRect(120, 603, 110, 22))
        self.deInizioGiorniFatturato.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.deInizioGiorniFatturato.setDateTime(QtCore.QDateTime(QtCore.QDate(2024, 1, 1), QtCore.QTime(0, 0, 0)))
        self.deInizioGiorniFatturato.setObjectName("deInizioGiorniFatturato")
        self.twClassificaGiorni = QtWidgets.QTableWidget(AnalisiDati)
        self.twClassificaGiorni.setGeometry(QtCore.QRect(350, 560, 231, 321))
        self.twClassificaGiorni.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.twClassificaGiorni.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.twClassificaGiorni.setObjectName("twClassificaGiorni")
        self.twClassificaGiorni.setColumnCount(2)
        self.twClassificaGiorni.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twClassificaGiorni.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twClassificaGiorni.setHorizontalHeaderItem(1, item)
        self.cbCategoriaFullCost = QtWidgets.QComboBox(AnalisiDati)
        self.cbCategoriaFullCost.setGeometry(QtCore.QRect(140, 105, 141, 22))
        self.cbCategoriaFullCost.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.cbCategoriaFullCost.setObjectName("cbCategoriaFullCost")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.cbCategoriaFullCost.addItem("")
        self.label_12 = QtWidgets.QLabel(AnalisiDati)
        self.label_12.setGeometry(QtCore.QRect(20, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(AnalisiDati)
        self.label_13.setGeometry(QtCore.QRect(440, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.cbCategoriaEfficienza = QtWidgets.QComboBox(AnalisiDati)
        self.cbCategoriaEfficienza.setGeometry(QtCore.QRect(540, 105, 141, 22))
        self.cbCategoriaEfficienza.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.cbCategoriaEfficienza.setObjectName("cbCategoriaEfficienza")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.cbCategoriaEfficienza.addItem("")
        self.lblGiornoFine = QtWidgets.QLabel(AnalisiDati)
        self.lblGiornoFine.setGeometry(QtCore.QRect(240, 640, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lblGiornoFine.setFont(font)
        self.lblGiornoFine.setText("")
        self.lblGiornoFine.setObjectName("lblGiornoFine")
        self.lblGiornoInizio = QtWidgets.QLabel(AnalisiDati)
        self.lblGiornoInizio.setGeometry(QtCore.QRect(240, 600, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lblGiornoInizio.setFont(font)
        self.lblGiornoInizio.setText("")
        self.lblGiornoInizio.setObjectName("lblGiornoInizio")

        self.retranslateUi(AnalisiDati)
        QtCore.QMetaObject.connectSlotsByName(AnalisiDati)
        ###############################
        self.deFineGiorniFatturato.dateChanged.connect(self.deFineGiorniFatturatoChanged)
        self.deInizioGiorniFatturato.dateChanged.connect(self.deInizioGiorniFatturatoChanged)
        self.cbCategoriaFullCost.currentIndexChanged.connect(self.cbCategoriaFullCostChanged)
        self.cbCategoriaEfficienza.currentIndexChanged.connect(self.cbCategoriaEfficienzaChanged)
        self.deInizioMediaFatturato.dateChanged.connect(self.deInizioMediaFatturatoChanged)
        self.deFineMediaFatturato.dateChanged.connect(self.deFineMediaFatturatoChanged)

        self.aggiornaTutto()

    def retranslateUi(self, AnalisiDati):
        _translate = QtCore.QCoreApplication.translate
        AnalisiDati.setWindowTitle(_translate("AnalisiDati", "Analisi dei Dati"))
        self.label.setText(_translate("AnalisiDati", "ANALISI DEI DATI"))
        self.label_2.setText(_translate("AnalisiDati", "Classifica FullCost Piatti"))
        item = self.twFullCostPiatti.horizontalHeaderItem(0)
        item.setText(_translate("AnalisiDati", "Nome"))
        item = self.twFullCostPiatti.horizontalHeaderItem(1)
        item.setText(_translate("AnalisiDati", "Categoria"))
        item = self.twFullCostPiatti.horizontalHeaderItem(2)
        item.setText(_translate("AnalisiDati", "Costo"))
        item = self.twEfficienzaPiatti.horizontalHeaderItem(0)
        item.setText(_translate("AnalisiDati", "Nome"))
        item = self.twEfficienzaPiatti.horizontalHeaderItem(1)
        item.setText(_translate("AnalisiDati", "Categoria"))
        item = self.twEfficienzaPiatti.horizontalHeaderItem(2)
        item.setText(_translate("AnalisiDati", "Rapporto Guadagno/Costo"))
        self.label_3.setText(_translate("AnalisiDati", "Classifica Efficienza Piatti"))
        self.label_5.setText(_translate("AnalisiDati", "Media Fatturato "))
        self.label_6.setText(_translate("AnalisiDati", "Dal"))
        self.label_7.setText(_translate("AnalisiDati", "al"))
        self.label_9.setText(_translate("AnalisiDati", "Media giornaliera:"))
        self.label_8.setText(_translate("AnalisiDati", "Classifica Giorni per Fatturato"))
        self.label_10.setText(_translate("AnalisiDati", "Data fine"))
        self.label_11.setText(_translate("AnalisiDati", "Data inizio"))
        item = self.twClassificaGiorni.horizontalHeaderItem(0)
        item.setText(_translate("AnalisiDati", "Giorno"))
        item = self.twClassificaGiorni.horizontalHeaderItem(1)
        item.setText(_translate("AnalisiDati", "Fatturato"))
        self.cbCategoriaFullCost.setItemText(0, _translate("AnalisiDati", "Tutte"))
        self.cbCategoriaFullCost.setItemText(1, _translate("AnalisiDati", "Bevande"))
        self.cbCategoriaFullCost.setItemText(2, _translate("AnalisiDati", "Antipasti"))
        self.cbCategoriaFullCost.setItemText(3, _translate("AnalisiDati", "Primi"))
        self.cbCategoriaFullCost.setItemText(4, _translate("AnalisiDati", "Secondi"))
        self.cbCategoriaFullCost.setItemText(5, _translate("AnalisiDati", "Contorni"))
        self.cbCategoriaFullCost.setItemText(6, _translate("AnalisiDati", "Sushi"))
        self.cbCategoriaFullCost.setItemText(7, _translate("AnalisiDati", "Pizza"))
        self.cbCategoriaFullCost.setItemText(8, _translate("AnalisiDati", "Dolci"))
        self.cbCategoriaFullCost.setItemText(9, _translate("AnalisiDati", "Caffetteria"))
        self.label_12.setText(_translate("AnalisiDati", "Categoria"))
        self.label_13.setText(_translate("AnalisiDati", "Categoria"))
        self.cbCategoriaEfficienza.setItemText(0, _translate("AnalisiDati", "Tutte"))
        self.cbCategoriaEfficienza.setItemText(1, _translate("AnalisiDati", "Bevande"))
        self.cbCategoriaEfficienza.setItemText(2, _translate("AnalisiDati", "Antipasti"))
        self.cbCategoriaEfficienza.setItemText(3, _translate("AnalisiDati", "Primi"))
        self.cbCategoriaEfficienza.setItemText(4, _translate("AnalisiDati", "Secondi"))
        self.cbCategoriaEfficienza.setItemText(5, _translate("AnalisiDati", "Contorni"))
        self.cbCategoriaEfficienza.setItemText(6, _translate("AnalisiDati", "Sushi"))
        self.cbCategoriaEfficienza.setItemText(7, _translate("AnalisiDati", "Pizza"))
        self.cbCategoriaEfficienza.setItemText(8, _translate("AnalisiDati", "Dolci"))
        self.cbCategoriaEfficienza.setItemText(9, _translate("AnalisiDati", "Caffetteria"))


    def aggiornaTutto(self):
        self.aggiornaLabelValoreMediaFatturato()
        self.aggiornaClassificaGiorni()
        self.aggiornaClassificaFullCostPiatti(self.cbCategoriaFullCost.currentText())
        self.aggiornaClassificaEfficienzaPiatti(self.cbCategoriaEfficienza.currentText())

    def aggiornaClassificaGiorni(self):
        inizio = self.deInizioGiorniFatturato.date().toString("yyyy-MM-dd")
        fine = self.deFineGiorniFatturato.date().toString("yyyy-MM-dd")

        giorni_settimana = ["Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica"]
        ricavi_per_giorno = {giorno: 0 for giorno in giorni_settimana}


        myconn = get_connection()
        cursor = myconn.cursor()
        query = """
        SELECT 
            CASE
                WHEN DAYOFWEEK(DataEOraFattura) = 1 THEN 'Domenica'
                WHEN DAYOFWEEK(DataEOraFattura) = 2 THEN 'Lunedì'
                WHEN DAYOFWEEK(DataEOraFattura) = 3 THEN 'Martedì'
                WHEN DAYOFWEEK(DataEOraFattura) = 4 THEN 'Mercoledì'
                WHEN DAYOFWEEK(DataEOraFattura) = 5 THEN 'Giovedì'
                WHEN DAYOFWEEK(DataEOraFattura) = 6 THEN 'Venerdì'
                WHEN DAYOFWEEK(DataEOraFattura) = 7 THEN 'Sabato'
            END AS GiornoDellaSettimana,
            SUM(Ricavo) AS FatturatoTotale
        FROM Fattura
        WHERE DATE(DataEOraFattura) BETWEEN %s AND %s
        GROUP BY GiornoDellaSettimana
        """
        cursor.execute(query, (inizio, fine))
        results = cursor.fetchall()

        for row in results:
            giorno, ricavo = row
            ricavi_per_giorno[giorno] = ricavo

        sorted_ricavi = sorted(ricavi_per_giorno.items(), key=lambda x: x[1], reverse=True)

        self.twClassificaGiorni.setRowCount(0)
        for row_number, row_data in enumerate(sorted_ricavi):
            self.twClassificaGiorni.insertRow(row_number)
            self.twClassificaGiorni.setItem(row_number, 0, QtWidgets.QTableWidgetItem(row_data[0]))
            self.twClassificaGiorni.setItem(row_number, 1, QtWidgets.QTableWidgetItem(f"{row_data[1]:.2f} €"))

        cursor.close()
        myconn.close()

    def deFineGiorniFatturatoChanged(self):
        self.lblGiornoFine.setText(self.get_giorno_della_settimana(self.deFineGiorniFatturato.date().dayOfWeek()))
        self.aggiornaClassificaGiorni()

    def deInizioGiorniFatturatoChanged(self):
        self.lblGiornoInizio.setText(self.get_giorno_della_settimana(self.deInizioGiorniFatturato.date().dayOfWeek()))
        self.aggiornaClassificaGiorni()

    def get_giorno_della_settimana(self,i):
        giorni_settimana = ["Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica"]
        return giorni_settimana[i - 1]

    def cbCategoriaFullCostChanged(self):
        self.aggiornaClassificaFullCostPiatti(self.cbCategoriaFullCost.currentText())

    def cbCategoriaEfficienzaChanged(self):
        self.aggiornaClassificaEfficienzaPiatti(self.cbCategoriaEfficienza.currentText())

    def deInizioMediaFatturatoChanged(self):
        self.aggiornaLabelValoreMediaFatturato()

    def deFineMediaFatturatoChanged(self):
        self.aggiornaLabelValoreMediaFatturato()

    def aggiornaLabelValoreMediaFatturato(self):
        try:

            myconn = get_connection()

            # Ottenere le date dalle dateEdit
            data_inizio = self.deInizioMediaFatturato.date().toString("yyyy-MM-dd")
            data_fine = self.deFineMediaFatturato.date().toString("yyyy-MM-dd")

            # Creare il cursore per eseguire le query
            cursor = myconn.cursor()

            if data_inizio == data_fine:
                # Query per ottenere il ricavo del giorno specifico se le date sono uguali
                query = f"SELECT SUM(Ricavo) FROM fattura WHERE DATE(DataEOraFattura) = '{data_inizio}'"
            else:
                # Query per ottenere la somma del ricavo delle fatture tra le due date
                query = f"SELECT SUM(Ricavo) FROM fattura WHERE DataEOraFattura BETWEEN '{data_inizio}' AND '{data_fine}'"

            # Esecuzione della query
            cursor.execute(query)
            result = cursor.fetchone()

            # Calcolo del numero di giorni tra le due date
            date_diff_query = f"SELECT DATEDIFF('{data_fine}', '{data_inizio}') + 1"
            cursor.execute(date_diff_query)
            days_diff = cursor.fetchone()[0]

            # Calcolo della media del fatturato giornaliero
            if result[0] is not None:
                media_fatturato = result[0] / days_diff
            else:
                media_fatturato = 0

            # Aggiornamento del valore della label
            self.lblValoreMediaFatturato.setText(f"{media_fatturato:.2f}€")

        except mysql.connector.Error as err:
            print(f"Errore durante l'accesso al database: {err}")
        finally:
            # Chiusura della connessione al database
            cursor.close()
            myconn.close()

    def aggiornaClassificaFullCostPiatti(self, categoria):


        conn = get_connection()
        cursor = conn.cursor()

        # Step 1: Recuperare tutti i piatti dal menu con il filtro di categoria
        if categoria == "Tutte":
            query_prodotti = "SELECT id, nome, categoria FROM prodottomenu"
            cursor.execute(query_prodotti)
        else:
            query_prodotti = "SELECT id, nome, categoria FROM prodottomenu WHERE categoria = %s"
            cursor.execute(query_prodotti, (categoria,))

        prodotti = cursor.fetchall()

        full_cost_piatti = []

        # Step 2: Per ogni piatto, ottenere gli ingredienti
        for prodotto in prodotti:
            prodotto_id = prodotto[0]
            prodotto_nome = prodotto[1]
            prodotto_categoria = prodotto[2]

            query_ingredienti = """
            SELECT ingredienteprodotto.IDNomeElemento, ingredienteprodotto.Quantita
            FROM ingredienteprodotto
            WHERE ingredienteprodotto.IDProdotto = %s
            """
            cursor.execute(query_ingredienti, (prodotto_id,))
            ingredienti = cursor.fetchall()

            costo_produzione = 0

            # Step 3: Per ogni ingrediente, trovare il prezzo dell'elemento corrispondente
            for ingrediente in ingredienti:
                id_nome_elemento = ingrediente[0]
                quantita = ingrediente[1]
                cursor.fetchall()
                query_prezzo_elemento = """
                SELECT elementomagazzino.Prezzo
                FROM elementomagazzino
                WHERE elementomagazzino.idNomeElemento = %s
                """
                cursor.execute(query_prezzo_elemento, (id_nome_elemento,))
                prezzo_elemento = cursor.fetchone()

                if prezzo_elemento:
                    prezzo_unitario = prezzo_elemento[0]
                    costo_produzione += prezzo_unitario * quantita

            full_cost_piatti.append((prodotto_nome, prodotto_categoria, costo_produzione))
        # Step 5: Ordinare i piatti in base al costo di produzione in ordine decrescente
        sorted_full_cost_piatti = sorted(full_cost_piatti, key=lambda x: x[2], reverse=True)

        # Step 6: Popolare la tabella twFullCostPiatti con i risultati
        self.twFullCostPiatti.setRowCount(0)
        for row_number, (nome_piatto, categoria_piatto, costo) in enumerate(sorted_full_cost_piatti):
            self.twFullCostPiatti.insertRow(row_number)
            self.twFullCostPiatti.setItem(row_number, 0, QtWidgets.QTableWidgetItem(nome_piatto))
            self.twFullCostPiatti.setItem(row_number, 1, QtWidgets.QTableWidgetItem(categoria_piatto))
            self.twFullCostPiatti.setItem(row_number, 2, QtWidgets.QTableWidgetItem(f"{costo:.2f} €"))

        cursor.close()
        conn.close()

    def aggiornaClassificaEfficienzaPiatti(self, categoria):

        conn = get_connection()
        cursor = conn.cursor()

        # Step 1: Recuperare tutti i piatti dal menu con il filtro di categoria
        if categoria == "Tutte":
            query_prodotti = "SELECT id, nome, categoria, prezzo FROM prodottomenu"
            cursor.execute(query_prodotti)
        else:
            query_prodotti = "SELECT id, nome, categoria, prezzo FROM prodottomenu WHERE categoria = %s"
            cursor.execute(query_prodotti, (categoria,))

        prodotti = cursor.fetchall()

        efficienza_piatti = []

        # Step 2: Per ogni piatto, ottenere gli ingredienti
        for prodotto in prodotti:
            prodotto_id = prodotto[0]
            prodotto_nome = prodotto[1]
            prodotto_categoria = prodotto[2]
            prezzo_vendita = prodotto[3]

            query_ingredienti = """
            SELECT ingredienteprodotto.IDNomeElemento, ingredienteprodotto.Quantita
            FROM ingredienteprodotto
            WHERE ingredienteprodotto.IDProdotto = %s
            """
            cursor.execute(query_ingredienti, (prodotto_id,))
            ingredienti = cursor.fetchall()

            costo_produzione = 0

            # Step 3: Per ogni ingrediente, trovare il prezzo dell'elemento corrispondente
            for ingrediente in ingredienti:
                id_nome_elemento = ingrediente[0]
                quantita = ingrediente[1]

                cursor.fetchall()
                query_prezzo_elemento = """
                SELECT elementomagazzino.Prezzo
                FROM elementomagazzino
                WHERE elementomagazzino.idNomeElemento = %s
                """
                cursor.execute(query_prezzo_elemento, (id_nome_elemento,))
                prezzo_elemento = cursor.fetchone()

                if prezzo_elemento:
                    prezzo_unitario = prezzo_elemento[0]
                    costo_produzione += prezzo_unitario * quantita

            if costo_produzione > 0:
                rapporto_guadagno_costo = prezzo_vendita / costo_produzione
            else:
                rapporto_guadagno_costo = 0

            efficienza_piatti.append((prodotto_nome, prodotto_categoria, rapporto_guadagno_costo))

        # Step 5: Ordinare i piatti in base al rapporto guadagno/costo in ordine decrescente
        sorted_efficienza_piatti = sorted(efficienza_piatti, key=lambda x: x[2], reverse=True)

        # Step 6: Popolare la tabella twEfficienzaPiatti con i risultati
        self.twEfficienzaPiatti.setRowCount(0)
        for row_number, (nome_piatto, categoria_piatto, rapporto) in enumerate(sorted_efficienza_piatti):
            self.twEfficienzaPiatti.insertRow(row_number)
            self.twEfficienzaPiatti.setItem(row_number, 0, QtWidgets.QTableWidgetItem(nome_piatto))
            self.twEfficienzaPiatti.setItem(row_number, 1, QtWidgets.QTableWidgetItem(categoria_piatto))
            self.twEfficienzaPiatti.setItem(row_number, 2, QtWidgets.QTableWidgetItem(f"{rapporto:.2f}"))

        cursor.close()
        conn.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GestioneFatture = QtWidgets.QDialog()
    ui = Ui_AnalisiDati()
    ui.setupUi(GestioneFatture)
    GestioneFatture.show()
    sys.exit(app.exec_())